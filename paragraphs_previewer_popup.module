<?php
/**
 * @file
 * Provides a rendered preview of a paragraphs item on an entity form.
 */

use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\paragraphs_previewer_popup\FormGenerator;

/**
 * Implements hook_theme().
 */
function paragraphs_previewer_popup_theme() {
  return [
    'paragraphs_previewer_modal_content' => [
      'variables' => ['preview_url' => NULL],
      'file' => 'paragraphs_previewer_popup.theme.inc',
    ],
  ];
}

/**
 * Implements hook_preprocess_html().
 */
function paragraphs_previewer_popup_preprocess_html__paragraphs_previewer_popup(&$variables) {
  unset($variables['page_top']);
  unset($variables['page_bottom']);
  if (isset($variables['html_attributes'])) {
    $variables['html_attributes']->addClass('paragraphs-previewer-html');
  }

  $variables['attributes']['class'][] = 'paragraphs-previewer';
}

/**
 * Implements hook_preprocess_page().
 */
function paragraphs_previewer_popup_preprocess_page__paragraphs_previewer_popup(&$variables) {
  if (!empty($variables['page'])) {
    $page_keys = \Drupal\Core\Render\Element::children($variables['page']);
    foreach ($page_keys as $page_key) {
      if ($page_key != 'content') {
        unset($variables['page'][$page_key]);
      }
    }
    $content_keys = \Drupal\Core\Render\Element::children($variables['page']['content']);
    foreach ($content_keys as $content_key) {
      if (isset($variables['page']['content'][$content_key]['#base_plugin_id']) &&
          $variables['page']['content'][$content_key]['#base_plugin_id'] != 'system_main_block') {
        unset($variables['page']['content'][$content_key]);
      }
    }
  }
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function paragraphs_previewer_popup_field_widget_settings_summary_alter(&$summary, $context) {
  if ($context['field_definition']->getType() == 'entity_reference_revisions') {
    if ($context['widget']->getThirdPartySetting('paragraphs_previewer_popup', 'enable')) {
      $summary[] = t('Preview enabled.');
    }
  }
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function paragraphs_previewer_popup_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  $element = [];
  if ($field_definition->getType() == 'entity_reference_revisions') {
    $element['enable'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable preview'),
      '#default_value' => $plugin->getThirdPartySetting('paragraphs_previewer_popup', 'enable'),
    ];
  }
  return $element;
 }

/**
 * Implements hook_field_widget_form_alter().
 */
function paragraphs_previewer_popup_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($context['items']->getFieldDefinition()->getType() == 'entity_reference_revisions') {
    if ($context['widget']->getThirdPartySetting('paragraphs_previewer_popup', 'enable')) {
      FormGenerator::modifyParagraphsTop($element, $form_state, $context);
    }
  }
}